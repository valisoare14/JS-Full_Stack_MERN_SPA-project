{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { setLoading, setToken } from \"../store/slices/slice\";\nimport { useDispatch } from \"react-redux\";\nfunction useCheckToken() {\n  _s();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    async function checkToken() {\n      try {\n        const token = sessionStorage.getItem('token');\n        if (token) {\n          const response = await fetch(`${process.env.REACT_APP_LOCAL_SERVER}authentification/verifytoken`, {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token\n            })\n          });\n          const result = await response.json();\n          if (response.status != 200) {\n            sessionStorage.removeItem('token');\n            dispatch(setToken(null));\n            throw new Error(result.message);\n          }\n          dispatch(setToken(token));\n          return;\n        } else if (localStorage.getItem('token')) {\n          const response = await fetch(`${process.env.REACT_APP_LOCAL_SERVER}cleardatabase`, {\n            method: \"DELETE\",\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: localStorage.getItem('token')\n            })\n          });\n          const result = await response.json();\n          if (!response.ok) {\n            throw new Error(result.message);\n          }\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n    checkToken().then(() => dispatch(setLoading(false))).catch(err => console.error(err));\n  }, []);\n}\n_s(useCheckToken, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\nexport { useCheckToken };","map":{"version":3,"names":["useEffect","setLoading","setToken","useDispatch","useCheckToken","_s","dispatch","checkToken","token","sessionStorage","getItem","response","fetch","process","env","REACT_APP_LOCAL_SERVER","method","headers","body","JSON","stringify","result","json","status","removeItem","Error","message","localStorage","ok","error","console","then","catch","err"],"sources":["C:/Users/User/Materii ASE/Lucrare de licenta/SoftwareProduct/my-react-app/src/custom_hooks/useCheckToken.js"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport { setLoading , setToken} from \"../store/slices/slice\"\r\nimport { useDispatch } from \"react-redux\"\r\n\r\nfunction useCheckToken() {\r\n    const dispatch=useDispatch()\r\n    useEffect(()=>{\r\n        async function checkToken(){\r\n            try {\r\n                const token=sessionStorage.getItem('token')\r\n                if(token){\r\n                    const response = await fetch(`${process.env.REACT_APP_LOCAL_SERVER}authentification/verifytoken`,{\r\n                        method:\"POST\",\r\n                        headers:{\r\n                            'Content-Type':'application/json'\r\n                        },\r\n                        body : JSON.stringify({token})\r\n                    })\r\n                    const result=await response.json()\r\n                    if(response.status!=200){\r\n                        sessionStorage.removeItem('token')\r\n                        dispatch(setToken(null))\r\n                        throw new Error(result.message)\r\n                    }\r\n                    dispatch(setToken(token))\r\n                    return\r\n                } else if(localStorage.getItem('token')) {\r\n                   const response = await fetch(`${process.env.REACT_APP_LOCAL_SERVER}cleardatabase`,{\r\n                        method:\"DELETE\",\r\n                        headers:{\r\n                            'Content-Type':'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            token: localStorage.getItem('token')\r\n                        })\r\n                   })\r\n                   const result = await response.json()\r\n                   if(!response.ok) {\r\n                        throw new Error(result.message)\r\n                   }\r\n                }\r\n            } catch (error) {           \r\n                console.error(error.message)\r\n            }\r\n        }\r\n        checkToken().then(()=>dispatch(setLoading(false))).catch(err=>console.error(err))\r\n    },[])\r\n}\r\n\r\nexport {useCheckToken}"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,EAAGC,QAAQ,QAAO,uBAAuB;AAC5D,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAACH,WAAW,CAAC,CAAC;EAC5BH,SAAS,CAAC,MAAI;IACV,eAAeO,UAAUA,CAAA,EAAE;MACvB,IAAI;QACA,MAAMC,KAAK,GAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAGF,KAAK,EAAC;UACL,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,8BAA6B,EAAC;YAC7FC,MAAM,EAAC,MAAM;YACbC,OAAO,EAAC;cACJ,cAAc,EAAC;YACnB,CAAC;YACDC,IAAI,EAAGC,IAAI,CAACC,SAAS,CAAC;cAACZ;YAAK,CAAC;UACjC,CAAC,CAAC;UACF,MAAMa,MAAM,GAAC,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;UAClC,IAAGX,QAAQ,CAACY,MAAM,IAAE,GAAG,EAAC;YACpBd,cAAc,CAACe,UAAU,CAAC,OAAO,CAAC;YAClClB,QAAQ,CAACJ,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxB,MAAM,IAAIuB,KAAK,CAACJ,MAAM,CAACK,OAAO,CAAC;UACnC;UACApB,QAAQ,CAACJ,QAAQ,CAACM,KAAK,CAAC,CAAC;UACzB;QACJ,CAAC,MAAM,IAAGmB,YAAY,CAACjB,OAAO,CAAC,OAAO,CAAC,EAAE;UACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,eAAc,EAAC;YAC7EC,MAAM,EAAC,QAAQ;YACfC,OAAO,EAAC;cACJ,cAAc,EAAC;YACnB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACjBZ,KAAK,EAAEmB,YAAY,CAACjB,OAAO,CAAC,OAAO;YACvC,CAAC;UACN,CAAC,CAAC;UACF,MAAMW,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;UACpC,IAAG,CAACX,QAAQ,CAACiB,EAAE,EAAE;YACZ,MAAM,IAAIH,KAAK,CAACJ,MAAM,CAACK,OAAO,CAAC;UACpC;QACH;MACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACH,OAAO,CAAC;MAChC;IACJ;IACAnB,UAAU,CAAC,CAAC,CAACwB,IAAI,CAAC,MAAIzB,QAAQ,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC+B,KAAK,CAACC,GAAG,IAAEH,OAAO,CAACD,KAAK,CAACI,GAAG,CAAC,CAAC;EACrF,CAAC,EAAC,EAAE,CAAC;AACT;AAAC5B,EAAA,CA3CQD,aAAa;EAAA,QACHD,WAAW;AAAA;AA4C9B,SAAQC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}