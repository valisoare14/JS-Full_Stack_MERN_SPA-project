{"ast":null,"code":"const dotenv = require('dotenv');\ndotenv.config();\nasync function fetchCoins() {\n  try {\n    const key = process.env.COINGECKO_API_KEY;\n    const response = await fetch(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin%2Cethereum%2Cbinancecoin%2Csolana%2Cripple%2Ccardano%2Cavalanche-2%2Cchainlink%2Cdogecoin%2Ctron%2Cpolkadot%2Cmatic-network%2Cinternet-computer%2Cuniswap&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en&precision=2&x_cg_api_key=${key}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport { fetchCoins };","map":{"version":3,"names":["dotenv","require","config","fetchCoins","key","process","env","COINGECKO_API_KEY","response","fetch","data","json","error","console"],"sources":["C:/Users/User/Materii ASE/Lucrare de licenta/SoftwareProduct/my-react-app/src/coin-gecko-api/fetchCoins.js"],"sourcesContent":["const dotenv=require('dotenv')\r\ndotenv.config()\r\nasync function fetchCoins(){\r\n    try {\r\n      const key=process.env.COINGECKO_API_KEY\r\n      const response = await fetch(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin%2Cethereum%2Cbinancecoin%2Csolana%2Cripple%2Ccardano%2Cavalanche-2%2Cchainlink%2Cdogecoin%2Ctron%2Cpolkadot%2Cmatic-network%2Cinternet-computer%2Cuniswap&order=market_cap_desc&per_page=100&page=1&sparkline=false&locale=en&precision=2&x_cg_api_key=${key}`);\r\n      const data = await response.json(); \r\n      return data\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n}\r\n\r\nexport {fetchCoins}\r\n"],"mappings":"AAAA,MAAMA,MAAM,GAACC,OAAO,CAAC,QAAQ,CAAC;AAC9BD,MAAM,CAACE,MAAM,CAAC,CAAC;AACf,eAAeC,UAAUA,CAAA,EAAE;EACvB,IAAI;IACF,MAAMC,GAAG,GAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB;IACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qUAAoUL,GAAI,EAAC,CAAC;IACxW,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACtB;AACJ;AAEA,SAAQT,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}